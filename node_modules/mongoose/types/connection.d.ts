const { ObjectId } = require('mongodb');
const db = require('../config/connection'); // Assuming `db` is your database connection module
const collection = require('../config/collections'); // Assuming `collection` has the collection names

module.exports = {
  // Fetch the user's cart
  getUserCart: async (userId) => {
    return await db.get().collection(collection.CART_COLLECTION).findOne({ userId: new ObjectId(userId) });
  },

  // Add a product to the user's cart or update its quantity if it already exists
  addProductToCart: async (userId, productId, productName) => {
    const cart = await db.get().collection(collection.CART_COLLECTION).findOne({ userId: new ObjectId(userId) });

    if (cart) {
      const productIndex = cart.products.findIndex(
        (product) => product.productId.toString() === productId
      );

      if (productIndex !== -1) {
        const existingProduct = cart.products[productIndex];

        // Check if the product's quantity or details need updating
        if (existingProduct.quantity !== 1 || existingProduct.productName !== productName) {
          await db.get().collection(collection.CART_COLLECTION).updateOne(
            {
              userId: new ObjectId(userId),
              "products.productId": new ObjectId(productId),
            },
            {
              $set: {
                "products.$.quantity": 1, // Update the quantity
                "products.$.productName": productName, // Update the name if needed
              },
            }
          );
          return { updatedProduct: true, productName };
        }

        // If no update is needed, return as already in cart
        return { alreadyInCart: true, productName };
      }

      // Add the product to the cart
      await db.get().collection(collection.CART_COLLECTION).updateOne(
        { userId: new ObjectId(userId) },
        { $push: { products: { productId: new ObjectId(productId), productName, quantity: 1 } } }
      );
    } else {
      // Create a new cart and add the product
      await db.get().collection(collection.CART_COLLECTION).insertOne({
        userId: new ObjectId(userId),
        products: [{ productId: new ObjectId(productId), productName, quantity: 1 }],
      });
    }

    return { addedToCart: true, productName };
  },
};
